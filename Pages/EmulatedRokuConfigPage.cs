using HomeSeerAPI;
using Hspi.Roku;
using NullGuard;
using Scheduler;
using System;
using System.Collections.Specialized;
using System.Globalization;
using System.Net;
using System.Text;
using System.Web;
using static System.FormattableString;

namespace Hspi.Pages
{
    /// <summary>
    /// Helper class to generate configuration page for plugin
    /// </summary>
    /// <seealso cref="Scheduler.PageBuilderAndMenu.clsPageBuilder" />
    [NullGuard(ValidationFlags.Arguments | ValidationFlags.NonPublic)]
    internal class EmulatedRokuConfigPage : PageHelper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmulatedRokuConfigPage" /> class.
        /// </summary>
        /// <param name="HS">The hs.</param>
        /// <param name="pluginConfig">The plugin configuration.</param>
        public EmulatedRokuConfigPage(IHSApplication HS, EmulatorRokuConfig pluginConfig) : base(HS, Name)
        {
            this.pluginConfig = pluginConfig;
        }

        /// <summary>
        /// Gets the name of the web page.
        /// </summary>
        public static string Name => pageName;

        /// <summary>
        /// Get the web page string for the configuration page.
        /// </summary>
        /// <returns>
        /// System.String.
        /// </returns>
        public string GetWebPage(string queryString)
        {
            try
            {
                NameValueCollection parts = HttpUtility.ParseQueryString(queryString);

                string pageType = parts[PageTypeId];

                reset();

                System.Text.StringBuilder stb = new System.Text.StringBuilder();
                stb.Append(HS.GetPageHeader(Name, "Configuration", string.Empty, string.Empty, false, false));

                stb.Append(PageBuilderAndMenu.clsPageBuilder.DivStart("pluginpage", string.Empty));
                switch (pageType)
                {
                    case EditDevicePageType:
                        EmulatedRokuSettings device = null;
                        string deviceId = parts[DeviceIdId];
                        if (!string.IsNullOrEmpty(deviceId))
                        {
                            pluginConfig.Devices.TryGetValue(Guid.Parse(deviceId), out device);
                        }
                        stb.Append(BuildAddNewWebPageBody(device)); break;

                    default:
                    case null:
                        stb.Append(BuildMainWebPageBody()); break;
                }
                stb.Append(PageBuilderAndMenu.clsPageBuilder.DivEnd());
                AddBody(stb.ToString());

                AddFooter(HS.GetPageFooter());
                suppressDefaultFooter = true;

                return BuildPage();
            }
            catch (Exception)
            {
                return "error";
            }
        }

        /// <summary>
        /// The user has selected a control on the configuration web page.
        /// The post data is provided to determine the control that initiated the post and the state of the other controls.
        /// </summary>
        /// <param name="data">The post data.</param>
        /// <param name="user">The name of logged in user.</param>
        /// <param name="userRights">The rights of the logged in user.</param>
        /// <returns>Any serialized data that needs to be passed back to the web page, generated by the clsPageBuilder class.</returns>
        public string PostBackProc(string data, [AllowNull]string user, int userRights)
        {
            NameValueCollection parts = HttpUtility.ParseQueryString(data);

            string form = parts["id"];

            if (form == NameToIdWithPrefix(SaveDeviceName))
            {
                StringBuilder results = new StringBuilder();

                IPAddress rokuAddress = null;
                if (string.IsNullOrWhiteSpace(parts[RokuAddressAddressId]) ||
                    !IPAddress.TryParse(parts[RokuAddressAddressId], out rokuAddress))
                {
                    results.AppendLine("Roku Address is not Valid.<br>");
                }

                int rokuAddressPort = 0;
                if (string.IsNullOrWhiteSpace(parts[RokuAddressPortId]) ||
                    !int.TryParse(parts[RokuAddressPortId], out rokuAddressPort) ||
                    (rokuAddressPort <= IPEndPoint.MinPort) ||
                    (rokuAddressPort >= IPEndPoint.MaxPort))
                {
                    results.AppendLine("Roku Address Port is not Valid.<br>");
                }

                IPAddress advertiseAddress = null;
                if (string.IsNullOrWhiteSpace(parts[AdvertiseAddressAddressId]) ||
                    !IPAddress.TryParse(parts[AdvertiseAddressAddressId], out advertiseAddress))
                {
                    results.AppendLine("Advertise Address is not Valid.<br>");
                }

                int advertiseAddressPort = 0;
                if (string.IsNullOrWhiteSpace(parts[AdvertiseAddressPortId]) ||
                    !int.TryParse(parts[AdvertiseAddressPortId], out advertiseAddressPort) ||
                    (advertiseAddressPort <= IPEndPoint.MinPort) ||
                    (advertiseAddressPort >= IPEndPoint.MaxPort))
                {
                    results.AppendLine("Advertise Address Port is not Valid.<br>");
                }

                string name = parts[nameof(EmulatedRokuSettings.Name)];
                if (string.IsNullOrWhiteSpace(name))
                {
                    results.AppendLine("Name is not Valid.<br>");
                }

                string serialNumber = parts[nameof(EmulatedRokuSettings.SerialNumber)];
                if (string.IsNullOrWhiteSpace(serialNumber))
                {
                    results.AppendLine("Serial Number is not Valid.<br>");
                }

                if (results.Length > 0)
                {
                    divToUpdate.Add(SaveErrorDivId, results.ToString());
                }
                else
                {
                    string deviceId = parts[DeviceIdId];

                    EmulatedRokuSettings device = new EmulatedRokuSettings(
                                                  Guid.Parse(deviceId),
                                                  name,
                                                  serialNumber,
                                                  new IPEndPoint(rokuAddress, rokuAddressPort),
                                                  new IPEndPoint(advertiseAddress, advertiseAddressPort));

                    pluginConfig.AddDevice(device);
                    pluginConfig.FireConfigChanged();
                    divToUpdate.Add(SaveErrorDivId, RedirectPageJS(Invariant($"/{HttpUtility.UrlEncode(EmulatedRokuConfigPage.Name)}")));
                }
            }
            else if (form == NameToIdWithPrefix(CancelDeviceName))
            {
                divToUpdate.Add(SaveErrorDivId, RedirectPageJS(Invariant($"/{HttpUtility.UrlEncode(EmulatedRokuConfigPage.Name)}")));
            }
            else if (form == NameToIdWithPrefix(DeleteDeviceName))
            {
                pluginConfig.RemoveDevice(Guid.Parse(parts[DeviceIdId]));
                pluginConfig.FireConfigChanged();
                divToUpdate.Add(SaveErrorDivId, RedirectPageJS(Invariant($"/{HttpUtility.UrlEncode(EmulatedRokuConfigPage.Name)}")));
            }
            else if (form == NameToIdWithPrefix(nameof(EmulatorRokuConfig.SSDAdvertiseAddress)))
            {
                if (IPAddress.TryParse(parts[NameToId(nameof(EmulatorRokuConfig.SSDAdvertiseAddress))], out var address))
                {
                    pluginConfig.SSDAdvertiseAddress = address;
                    pluginConfig.FireConfigChanged();
                }
            }
            else if (form == NameToIdWithPrefix(nameof(EmulatorRokuConfig.MinWaitForKeyPress)))
            {
                if (int.TryParse(parts[NameToId(nameof(EmulatorRokuConfig.MinWaitForKeyPress))], out var timeOut))
                {
                    pluginConfig.MinWaitForKeyPress = TimeSpan.FromMilliseconds(timeOut);
                }
            }
            else if (form == NameToIdWithPrefix(nameof(EmulatorRokuConfig.CommandMappingFile)))
            {
                pluginConfig.CommandMappingFile = parts[NameToId(nameof(EmulatorRokuConfig.CommandMappingFile))];
                pluginConfig.FireConfigChanged();
            }

            return base.postBackProc(Name, data, user, userRights);
        }

        protected string PageTypeButton(string name, string label, string type, string deviceId = null)
        {
            clsJQuery.jqButton b = new clsJQuery.jqButton(name, label, PageName, false)
            {
                id = NameToIdWithPrefix(name),
                url = Invariant($"/{HttpUtility.UrlEncode(EmulatedRokuConfigPage.Name)}?{PageTypeId}={HttpUtility.UrlEncode(type)}&{DeviceIdId}={HttpUtility.UrlEncode(deviceId ?? string.Empty)}"),
            };

            return b.Build();
        }

        private static string NameToId(string name)
        {
            return name.Replace(' ', '_');
        }

        private string BuildAddNewWebPageBody([AllowNull]EmulatedRokuSettings device)
        {
            var id = device != null ? device.Id : Guid.NewGuid();
            var name = device != null ? device.Name : string.Empty;
            var serialNumber = device != null ? device.SerialNumber : string.Empty;
            var rokuAddress = device != null ? device.RokuAddress.Address.ToString() : string.Empty;
            var rokuPort = device != null ? device.RokuAddress.Port : EmulatedRokuSettings.DefaultPort;
            var advertiseAddress = device != null ? device.AdvertiseAddress.Address.ToString() : string.Empty;
            var advertisePort = device != null ? device.AdvertiseAddress.Port : EmulatedRokuSettings.DefaultPort;

            string buttonLabel = device != null ? "Save" : "Add";
            string header = device != null ? "Edit" : "Add New";

            StringBuilder stb = new StringBuilder();

            stb.Append(PageBuilderAndMenu.clsPageBuilder.FormStart("ftmDeviceChange", "IdChange", "Post"));

            stb.Append(@"<div>");
            stb.Append(@"<table class='full_width_table'>");
            stb.Append("<tr height='5'><td style='width:25%'></td><td style='width:20%'></td><td style='width:55%'></td></tr>");
            stb.Append(Invariant($"<tr><td class='tableheader' colspan=3>{header}</td></tr>"));
            stb.Append(Invariant($"<tr><td class='tablecell'>Name:</td><td class='tablecell' colspan=2>{HtmlTextBox(nameof(EmulatedRokuSettings.Name), name)}</td></tr>"));
            stb.Append(Invariant($"<tr><td class='tablecell'>Serial Number:</td><td class='tablecell' colspan=2>{HtmlTextBox(nameof(EmulatedRokuSettings.SerialNumber), serialNumber)}</td></tr>"));
            stb.Append(Invariant($"<tr><td class='tablecell'>Roku Address:</td><td class='tablecell' colspan=2>{HtmlTextBox(RokuAddressAddressId, rokuAddress)}</td></tr>"));
            stb.Append(Invariant($"<tr><td class='tablecell'>Roku Port:</td><td class='tablecell' colspan=2>{HtmlTextBox(RokuAddressPortId, rokuPort.ToString(CultureInfo.InvariantCulture))}</td></tr>"));
            stb.Append(Invariant($"<tr><td class='tablecell'>Advertise Address:</td><td class='tablecell' colspan=2>{HtmlTextBox(AdvertiseAddressAddressId, advertiseAddress)}</td></tr>"));
            stb.Append(Invariant($"<tr><td class='tablecell'>Advertise Port:</td><td class='tablecell' colspan=2>{HtmlTextBox(AdvertiseAddressPortId, advertisePort.ToString(CultureInfo.InvariantCulture))}</td></tr>"));
            stb.Append(Invariant($"<tr><td colspan=3>{HtmlTextBox(DeviceIdId, id.ToString(), type: "hidden")}<div id='{SaveErrorDivId}' style='color:Red'></div></td><td></td></tr>"));
            stb.Append(Invariant($"<tr><td colspan=3>{FormPageButton(SaveDeviceName, buttonLabel)}"));

            if (device != null)
            {
                stb.Append(FormPageButton(DeleteDeviceName, "Delete"));
            }

            stb.Append(FormPageButton(CancelDeviceName, "Cancel"));
            stb.Append(Invariant($"</td><td></td></tr>"));
            stb.Append("<tr height='5'><td colspan=3></td></tr>");
            stb.Append(@"</table>");
            stb.Append(@"</div>");
            stb.Append(PageBuilderAndMenu.clsPageBuilder.FormEnd());

            return stb.ToString();
        }

        private string BuildMainWebPageBody()
        {
            StringBuilder stb = new StringBuilder();

            stb.Append(@"<div>");
            stb.Append(@"<table class='full_width_table'>");
            stb.Append("<tr height='5'><td colspan=4></td></tr>");
            stb.Append("<tr><td class='tableheader' colspan=4>Emulated Rokus</td></tr>");
            stb.Append(@"<tr><td class='tablecolumn'>Name</td>" +
                        "<td class='tablecolumn'>Serial Number</td>" +
                        "<td class='tablecolumn'>Address</td>" +
                        "<td class='tablecolumn'></td></tr>");

            foreach (var device in pluginConfig.Devices)
            {
                stb.Append(@"<tr>");
                stb.Append(Invariant($"<td class='tablecell'>{HtmlEncode(device.Value.Name)}</td>"));
                stb.Append(Invariant($"<td class='tablecell'>{HtmlEncode(device.Value.SerialNumber)}</td>"));
                stb.Append(Invariant($"<td class='tablecell'>{HtmlEncode(device.Value.RokuAddress)}</td>"));
                stb.Append(Invariant($"<td class='tablecell'>{PageTypeButton(Invariant($"Edit{device.Key}"), "Edit", EditDevicePageType, deviceId: device.Key.ToString())}</td></tr>"));
            }
            stb.Append(Invariant($"<tr><td colspan=4>{PageTypeButton("Add New Device", AddNewName, EditDevicePageType)}</td><td></td></tr>"));
            stb.Append("<tr height='5'><td colspan=4></td></tr>");
            stb.Append(Invariant($"<tr><td colspan=4>"));
            stb.Append(FormStart("ftmSettings", "Id", "Post"));
            stb.Append(Invariant($"<BR>Roku SSDP Advertise Address:{FormTextBox(nameof(EmulatorRokuConfig.SSDAdvertiseAddress), "Roku SSDP Advertise Address", pluginConfig.SSDAdvertiseAddress?.ToString())}"));
            stb.Append(Invariant($"<BR>Min Delay for Http requests:{FormTextBox(nameof(EmulatorRokuConfig.MinWaitForKeyPress), "Min Delay for Http requests", pluginConfig.MinWaitForKeyPress.TotalMilliseconds.ToString(CultureInfo.InvariantCulture))}"));
            stb.Append(Invariant($"<BR>Command Mapping File:{FormTextBox(nameof(EmulatorRokuConfig.CommandMappingFile), "Command Mapping File", pluginConfig.CommandMappingFile)}"));
            stb.Append(FormEnd());
            stb.Append(Invariant($"</td></tr>"));

            stb.Append(Invariant($"<tr><td colspan=4></td></tr>"));
            stb.Append(@"<tr height='5'><td colspan=4></td></tr>");
            stb.Append(@"</table>");
            stb.Append(@"</div>");

            return stb.ToString();
        }

        private const string AddNewName = "Add New";
        private const string AdvertiseAddressAddressId = nameof(EmulatedRokuSettings.AdvertiseAddress) + nameof(IPEndPoint.Address);
        private const string AdvertiseAddressPortId = nameof(EmulatedRokuSettings.AdvertiseAddress) + nameof(IPEndPoint.Port);
        private const string CancelDeviceName = "CancelDeviceName";
        private const string DeleteDeviceName = "DeleteDeviceName";
        private const string DeviceIdId = "DeviceIdId";
        private const string EditDevicePageType = "addNew";
        private const string RokuAddressAddressId = nameof(EmulatedRokuSettings.RokuAddress) + nameof(IPEndPoint.Address);
        private const string RokuAddressPortId = nameof(EmulatedRokuSettings.RokuAddress) + nameof(IPEndPoint.Port);
        private const string SaveDeviceName = "SaveDeviceName";
        private const string SaveErrorDivId = "SaveErrorDivId";
        private static readonly string pageName = Invariant($"{PluginData.PluginName} Roku Configuration").Replace(' ', '_');
        private readonly EmulatorRokuConfig pluginConfig;
    }
}